if(USE_ARBLIB)
    macro (add_executable _name)
        # invoke built-in add_executable
        _add_executable(${ARGV})
        if (TARGET ${_name})
            target_link_libraries(${_name} flint flint-arb gmp quartz_runtime)
        endif()
    endmacro()
    add_compile_definitions(USE_ARBLIB)
else()
    macro (add_executable _name)
        # invoke built-in add_executable
        _add_executable(${ARGV})
        if (TARGET ${_name})
            target_link_libraries(${_name} quartz_runtime)
        endif()
    endmacro()
endif()

include_directories(${CMAKE_INCLUDE_PATH})
include_directories("..")

link_directories("../..")

file(GLOB_RECURSE GEN_ECC_SET "gen_ecc_set.cpp")
file(GLOB_RECURSE TEST_ALL "test_all.cpp")
file(GLOB_RECURSE TEST_BFS "test_bfs.cpp")
file(GLOB_RECURSE TEST_CONTEXT_SHIFT "test_context_shift.cpp")
file(GLOB_RECURSE TEST_EQUIV_SET "test_equivalence_set.cpp")
file(GLOB_RECURSE TEST_GENERATOR "test_generator.cpp")
file(GLOB_RECURSE TEST_GRAPH_TO_QASM "test_graph_to_qasm.cpp")
file(GLOB_RECURSE TEST_OPTIMIZATION "test_optimization.cpp")
file(GLOB_RECURSE TEST_OPTIMIZATION_SA "test_optimization_sa.cpp")
file(GLOB_RECURSE TEST_PHASE_SHIFT "test_phase_shift.cpp")
file(GLOB_RECURSE TEST_PRUNING "test_pruning.cpp")
file(GLOB_RECURSE TEST_QUARTZ "test_quartz.cpp")
file(GLOB_RECURSE TEST_RIGETTI "test_rigetti.cpp")
file(GLOB_RECURSE TEST_ROTATION_MERGING "test_rotation_merging.cpp")
file(GLOB_RECURSE TEST_SPARSITY "test_sparsity.cpp")
file(GLOB_RECURSE TEST_TOFFOLI_FLIP "test_toffoli_flip.cpp")
file(GLOB_RECURSE TEST_APPLY_XFER "test_apply_xfer.cpp")
file(GLOB_RECURSE TEST_IBMQ "test_ibmq.cpp")
file(GLOB_RECURSE TEST_NAM "test_nam.cpp")
file(GLOB_RECURSE TEST_IBMQ_TD_DISABLED "test_ibmq_td_disabled.cpp")
file(GLOB_RECURSE TEST_NAM_TD_DISABLED "test_nam_td_disabled.cpp")
file(GLOB_RECURSE TEST_RIGETTI_TD_DISABLED "test_rigetti_td_disabled.cpp")
file(GLOB_RECURSE TEST_APPLIABLE_XFER "test_appliable_xfer.cpp")
file(GLOB_RECURSE TEST_FROM_AND_TO_QASM "test_from_and_to_qasm.cpp")
file(GLOB_RECURSE TEST_OPTIMIZE "test_optimize.cpp")
file(GLOB_RECURSE TEST_DEVICE "test_device.cpp")
file(GLOB_RECURSE TEST_INIT_PHYSICAL_MAPPING "test_init_qubit_mapping.cpp")
file(GLOB_RECURSE TEST_MAPPING_CORRECTNESS "test_mapping_correctness.cpp")
file(GLOB_RECURSE TEST_IMPLEMENTATION_COST "test_implementation_cost.cpp")
file(GLOB_RECURSE TEST_ADD_SWAP "test_add_swap.cpp")
file(GLOB_RECURSE TEST_SABRE "test_sabre.cpp")
file(GLOB_RECURSE TEST_APPLY_MAPPING "test_apply_mapping.cpp")
file(GLOB_RECURSE TEST_SABRE_FULL "test_sabre_full.cpp")
file(GLOB_RECURSE TEST_SABRE_WITH_SEARCH "test_sabre_with_search.cpp")
file(GLOB_RECURSE TEST_EXECUTE_GATE "test_execute_gate.cpp")
file(GLOB_RECURSE TEST_FIND_EXECUTABLE_FRONT_GATES "test_find_executable_front_gates.cpp")
file(GLOB_RECURSE TEST_SIMPLIFY_CIRCUIT "test_simplify_circuit.cpp")
file(GLOB_RECURSE TEST_GAME "test_game.cpp")
file(GLOB_RECURSE TEST_APPLY_ACTION "test_apply_action.cpp")
file(GLOB_RECURSE TEST_APPLY_ACTION_FULL "test_apply_action_full.cpp")
file(GLOB_RECURSE TEST_ENV "test_env.cpp")
file(GLOB_RECURSE TEST_GRAPH_STATE "test_graph_state.cpp")
file(GLOB_RECURSE TEST_TOPOLOGY_ORDER "test_topology_order.cpp")
file(GLOB_RECURSE TEST_FRONT_SET "test_front_set.cpp")
file(GLOB_RECURSE TEST_GAME_INITIAL "test_game_initial.cpp")
file(GLOB_RECURSE TEST_RANDOM_INITIAL_MAPPING "test_random_initial_mapping.cpp")
file(GLOB_RECURSE TEST_GAME_COPY "test_game_copy.cpp")
file(GLOB_RECURSE TEST_ENV_RANDOM_START "test_env_random_start.cpp")
file(GLOB_RECURSE TEST_GAME_SEARCH "test_game_search.cpp")
file(GLOB_RECURSE TEST_SEARCH_ENV "test_search_env.cpp")
file(GLOB_RECURSE TEST_READ_MAPPING "test_read_mapping.cpp")
file(GLOB_RECURSE TEST_GAME_SEARCH_ACTION_SPACE "test_game_search_action_space.cpp")
file(GLOB_RECURSE TEST_GAME_HYBRID "test_game_hybrid.cpp")
file(GLOB_RECURSE TEST_ENV_HYBRID "test_env_hybrid.cpp")
file(GLOB_RECURSE TEST_GENERATE_PLAN "test_generate_plan.cpp")
file(GLOB_RECURSE TEST_MBQ "test_mbq.cpp")
file(GLOB_RECURSE TEST_FIDELITY_CALCULATION "test_fidelity_calculation.cpp")
file(GLOB_RECURSE TEST_DEFAULT_FIDELITY_GRAPHS "test_default_fidelity_graphs.cpp")
file(GLOB_RECURSE TEST_SUM_FIDELITY "test_sum_fidelity.cpp")
# benchmarks
file(GLOB_RECURSE TEST_ROLLOUT "test_rollout.cpp")
file(GLOB_RECURSE BENCHMARK_SABRE_1PASS "_benchmark_sabre_1_pass.cpp")
file(GLOB_RECURSE CHECK_FRONT_PERCENTAGE "check_front_percentage.cpp")
file(GLOB_RECURSE TEST_PHYSICAL_BENCHMARK "test_physical_benchmark.cpp")
if(USE_ARBLIB)
    file(GLOB_RECURSE TEST_ARB "test_arb.cpp")
endif()

# add_library(libquartz_runtime SHARED IMPORTED)
# set_property(TARGET libquartz_runtime PROPERTY IMPORTED_LOCATION "../libquartz_runtime.so")

add_executable(gen_ecc_set ${GEN_ECC_SET})
add_executable(test_all ${TEST_ALL} )
add_executable(test_bfs ${TEST_BFS} )
add_executable(test_context_shift ${TEST_CONTEXT_SHIFT} )
add_executable(test_equiv_set ${TEST_EQUIV_SET} )
add_executable(test_generator ${TEST_GENERATOR} )
add_executable(test_graph_to_qasm ${TEST_GRAPH_TO_QASM} )
add_executable(test_optimization ${TEST_OPTIMIZATION} )
add_executable(test_optimization_sa ${TEST_OPTIMIZATION_SA} )
add_executable(test_phase_shift ${TEST_PHASE_SHIFT} )
add_executable(test_pruning ${TEST_PRUNING} )
add_executable(test_quartz ${TEST_QUARTZ} )
add_executable(test_rigetti ${TEST_RIGETTI} )
add_executable(test_sparsity ${TEST_SPARSITY} )
add_executable(test_rotation_merging ${TEST_ROTATION_MERGING} )
add_executable(test_toffoli_flip ${TEST_TOFFOLI_FLIP} )
add_executable(test_apply_xfer ${TEST_APPLY_XFER} )
add_executable(test_ibmq ${TEST_IBMQ} )
add_executable(test_nam ${TEST_NAM} )
add_executable(test_ibmq_td_disabled ${TEST_IBMQ_TD_DISABLED} )
add_executable(test_nam_td_disabled ${TEST_NAM_TD_DISABLED} )
add_executable(test_rigetti_td_disabled ${TEST_RIGETTI_TD_DISABLED} )
add_executable(test_appliable_xfer ${TEST_APPLIABLE_XFER} )
add_executable(test_from_and_to_qasm ${TEST_FROM_AND_TO_QASM} )
add_executable(test_optimize ${TEST_OPTIMIZE} )
add_executable(test_device ${TEST_DEVICE})
add_executable(test_init_qubit_mapping ${TEST_INIT_PHYSICAL_MAPPING})
add_executable(test_mapping_correctness ${TEST_MAPPING_CORRECTNESS})
add_executable(test_implementation_cost ${TEST_IMPLEMENTATION_COST})
add_executable(test_add_swap ${TEST_ADD_SWAP})
add_executable(test_sabre ${TEST_SABRE})
add_executable(test_apply_mapping ${TEST_APPLY_MAPPING})
add_executable(test_sabre_full ${TEST_SABRE_FULL})
add_executable(test_sabre_with_search ${TEST_SABRE_WITH_SEARCH})
add_executable(test_execute_gate ${TEST_EXECUTE_GATE})
add_executable(test_find_executable_front_gates ${TEST_FIND_EXECUTABLE_FRONT_GATES})
add_executable(test_simplify_circuit ${TEST_SIMPLIFY_CIRCUIT})
add_executable(test_game ${TEST_GAME})
add_executable(test_apply_action_full ${TEST_APPLY_ACTION_FULL})
add_executable(test_env ${TEST_ENV})
add_executable(test_graph_state ${TEST_GRAPH_STATE})
add_executable(test_topology_order ${TEST_TOPOLOGY_ORDER})
add_executable(test_front_set ${TEST_FRONT_SET})
add_executable(test_game_initial ${TEST_GAME_INITIAL})
add_executable(test_random_initial_mapping ${TEST_RANDOM_INITIAL_MAPPING})
add_executable(test_game_copy ${TEST_GAME_COPY})
add_executable(test_env_random_start ${TEST_ENV_RANDOM_START})
add_executable(test_game_search ${TEST_GAME_SEARCH})
add_executable(test_search_env ${TEST_SEARCH_ENV})
add_executable(test_read_mapping ${TEST_READ_MAPPING})
add_executable(test_game_search_action_space ${TEST_GAME_SEARCH_ACTION_SPACE})
add_executable(test_game_hybrid ${TEST_GAME_HYBRID})
add_executable(test_env_hybrid ${TEST_ENV_HYBRID})
add_executable(test_generate_plan ${TEST_GENERATE_PLAN})
add_executable(test_mbq ${TEST_MBQ})
add_executable(test_fidelity_calculation ${TEST_FIDELITY_CALCULATION})
add_executable(test_default_fidelity_graphs ${TEST_DEFAULT_FIDELITY_GRAPHS})
add_executable(test_sum_fidelity ${TEST_SUM_FIDELITY})
# benchmarks
add_executable(test_rollout ${TEST_ROLLOUT})
add_executable(benchmark_sabre_1pass ${BENCHMARK_SABRE_1PASS})
add_executable(check_front_percentage ${CHECK_FRONT_PERCENTAGE})
add_executable(test_physical_benchmark ${TEST_PHYSICAL_BENCHMARK})
if(USE_ARBLIB)
    add_executable(test_arb ${TEST_ARB} )
endif()
